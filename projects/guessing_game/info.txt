> cargo new guessing_game // Creating new guessing game

=> Use `io` library to get user input and print result as output.
=> `io` library comes from standard library, known as `std`.

> use std::io; // importing std::io to accept user input

=> By default rust have set of items defined in the standard library that it brings into scope of every program. This set is called prelude.
=> The items listed in prelude doesn't need to import.
=> Standard prelude contains:
- Primtive Types (bool, char, i32, u64)
- Common Traits (Clone, Copy, Debug, Default, Fn)
- Common function and macros (drop, print!, println!, vec!, assert!)

=> If a type is not in prelude then we need to bring it into scope explicitly using `use` statement.


# Storing value with variables:

> let mut guess = String::new(); // Creating new mutable variable with name guess

=> `let` is used to create variables.
=> By default variables in Rust are immutable.
=> `mut`is used to make a variables mutable.
=> Guess is assigned value `String::new()`
=> `String` is string type provided by standard library that is growable, UTF-8 bit of text.
=> `::` in `::new` indicates `new` is an associated function of the String type.
=> An associated function is a function that's implemented on type, in this case String.
=> `new` function creates new, empty string.
=> `new` function is present on many types because it’s a common name for a function that makes a new value of some kind.

# Receiving User input

> io::stdin()
        .read_line(&mut guess) // Reading user input using stdin function

=> To handle user input we call `stdin` function from `io` module.
=> Without importing `io` module with `use std::io`, we can call `stdin` function with `std::io::stdin()`
=> `stdin` returns an instance of `std::io::stdin` which is a type that represents a handle to standard input for your terminal.
=> `read_line(&mut guess)` calls `read_line` method of standard input handle to get user input.
=> `&mut guess` argument is used to tell what string to store the user input.
=>  The full job of read_line is to take whatever the user types into standard input and append that into a string (without overwriting its contents).
=> `&` indicates that this argument is reference.
=> Reference gives you a way to use one piece of data in multiple parts of code without copying that code into memory multiple times.

# Handling error

=> `read_line` also returns a `Result` value.
=> `Result` is an enumeration also called enum.which is a type that can be in one of multiple possible states. We call each possible state a variant.
=> `Result` variants:
- `Ok` -> Indicates operation was successful, `Ok` contains successfully generated value.
- `Err`-> Indicates operation failed, `Err` contains why operation failed

=> The `Result` have `expect` method that can be called to handle error.

> .expect("Failed to read line");

=> `expect` will cause program to crash and display the message passed to it if, instance of `Result` is an `Err` value.
=> `expect` will return the value held by `Ok`, id `Result` is `Ok`.

# Printing result

> println!("You guessed: {guess}");

=> `println!` macro is used to print result.
=> `{}` is a placeholder.
=> When printing variable the curly braces contains variable name, `{guess}`.
=> When printing a result of evaluating expression place empty curly braces `{}`.
> println!("x = {} and y = {}", 1, 2); // Will "print x = 1 and y = 2"

## Generating random number using `rand` crate

=> "crate" is a collection of Rust source code files.
=> The project we are building is a "binary crate".
=> "rand crate" is a library crate that can help generate random number.
=> Add 'rand` crate as a dependency in Cargo.toml with version number under dependencies header section.

> [dependencies] 
  rand = "0.8.5" //adding rand crate as dependencyin Cargo.toml

=> Note: Version may change in future
=> After adding `rand` crate in Cargo.toml run `cargo build`.
=> After adding external dependency, Cargo will fetch all the latest version of everything that dependency needs from the registry, which is a copy of data from crates.io.
=> Crate.io have all the open source rust projects for others to use, built by Rust programmers.
=> After updating the registry, Cargo checks the [dependencies] section and downloads any crates listed that aren’t already downloaded.
=> After downloading crates Rust compiles them and then compiles the project with the dependencies available.

# Reproducible Builds with the Cargo.lock File

=> Cargo.lock file is important for reproducible builds.
=> When we build a project for the first time, Cargo figures out all the versions of the dependencies that fit the criteria and then writes them to the Cargo.lock file.
=> When we build our project in the future, Cargo will see that the Cargo.lock file exists and will use the versions specified there rather than doing all the work of figuring out versions again. 

# Updating crate to get a New version

> cargo update

=> To update crate first update version in Cargo.toml and run `cargo update` to update the crate.
=> `cargo update` will ignore Cargo.lock file and figure out all the latest versions that are available that fits our specifications in Cargo.toml.
=> Cargo will then rewrite the Cargo.lock file.
=> Next time `cargo build` is run, cargo will update registry of crates available and reevaluate your `rand` requirements according to new version.

# Generaing random number

=> Import `rand` into our code.

> use rand::Rng; // importing rand and Rng traits from rand

=> `Rng` trait defines methods that random number generators implement.

> let secret_number = rand::thread_rng().gen_range(1..=100);

=> Calling `rand::thread_rng()` function gives us the particular random number generator we're going to use: one that is local to current thread of execution and seeded by the operating system.
=> We call `gen_range()` method on the random number generator. This method is defined in `Rng` trait.
=> `gen_range(1..=100)` takes range expression as an argument.
=> Range expression `1..-100` takes form of `start..=end`, start and end are inclusive.
=> `1..=100` gives number in range 1 to 100.
=> To get documentation of all the installed dependencies use:

> cargo doc --open

## Comparing the guess to secret number

# Converting string to number type

=> `guess` variable is of type string.
=> `secret_number` is number type (132 by default).
=> Rust have multiple number types 
- i32 : 32 bit number
- u32 : 32 bit unsigned number
- i64 : 64 bit number
- u64 : 64 bit unsigned number 
=> To compare `guess` with `secret_number` we need to convert `guess` type to number.

> let guess: u32 = guess.trim().parse().expect("Please type a number!");

=> Here we add new value to `guess` variable, Rust allow us to shadow the previous value of `guess` with a new one.

=> Rather than creating new variable we can use shadowing to reuse variable name.

=> In `guess.trim().parse()` guess is original `guess` variable that contains input as a string. `trim()` will eliminate whitespaces at the beginning and end.

=> The user must press enter to satisfy read_line and input their guess, which adds a newline character to the string. For example, if the user types 5 and presses enter, guess looks like this: 5\n. The \n represents “newline.” (On Windows, pressing enter results in a carriage return and a newline, \r\n.) The trim method eliminates \n or \r\n, resulting in just 5.

=> `parse()` method on strings converts a string to another type. In our example we convert string to number.
=> `:u32` in `let guess:u32` tells Rust what number type we want.
=> Since we are comparing u32 type `guess` with `secret_number`, Rust will infer `secret_number` to u32. 
=> `parse()` method returns "Result" type. If Result type is `OK` then expect will return converted number, else if it is `Err` then expect will throw error and print given string.

> use std::cmp::Ordering;
  
  match guess.cmp(&secret_number) {
        Ordering::Less => println!("Too small!");
        Ordering::Greater => println!("Too big!");
        Ordering::Equal => println!("You win!");
  }

=> Add `std::cmp::Ordering` type from standard library using `use`.
=> `Ordering` type is an enum with variants `Less`, `Greater` and `Equal`.
=> `cmp` method compares two values, it can be called upon anything that can be compared. Here wee call `cmp` on `guess`.
=> `cmp` takes reference to whatever you compare with, here we give it reference to `&secret_number`.
=> `cmp` returns variant of Ordering enum.
=> `match` is used to decide what to do next based on variant returned by calling `cmp`.
=> `match` expression is made up of "arms".
=> An "arm" consist of a pattern to match against, and code that should be run when value given to `match` fits that arm's pattern.
















